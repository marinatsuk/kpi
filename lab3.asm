TITLE Vihidni kod 2.1
;--------------------------------------------------------------------------------- 	
;ЛР №3. Дослідження механізмів адресації архітектури ІА-32 (X86) у Real Adress Mode
;-----------------------------------------------------------------------------
;Архітектура комп'ютера
;ВУЗ: НТУУ КПІ
;Факультет: ФІОТ
;Курс: 1
;Група: ІТ-03
;-----------------------------------------------------------------------------
;Автор: Бублик, Дудченко, Цуканова
;Дата: 17.03.21	
;----------------I.ЗАГОЛОВОК ПРОГРАМИ-----------------------
IDEAL         ; Директива - тип Асемблера tasm
MODEL SMALL   ; Директива - тип моделі пам'яті
STACK 256     ; Директива - розмір стеку в байтах
;-----------------II.МАКРОСИ----------------------------------------
; Складний макрос для ініціалізації
MACRO M_Init		; Початок макросу 
mov	ax, @data		; ax <- @data
mov	ds, ax			; ds <- ax
mov	es, ax			; es <- ax
ENDM M_Init		; Кінець макросу

;--------------------III.ПОЧАТОК СЕГМЕНТУ ДАНИХ--------------
DATASEG
;Оголошення двовимірного експериментального масиву 16х16 
array2Db	db  7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8
			db  8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7
			db  7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8
			db  8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7
			db  7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8
			db  8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7
			db  7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8
			db  66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7
			db  8, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8
			db	7, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7
			db	8, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8
			db	7, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7
			db	8, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8
			db	7, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 7
			db	8, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 8
			db	7, 8, 7, 8, 7, 8, 7, 8, 83, 8, 7, 8, 7, 8, 7, 7

exCode		DB 0 
;----------------------VI. ПОЧАТОК СЕГМЕНТУ КОДУ-------------------
CODESEG
Start:
	M_Init
	 
	;Базова адресація. Призначена для роботи з масивами

	mov al, 02h		;Число, що буде записано до ділянки дампу
	mov bx, 08h		;До ВХ заносимо ефективну адресу потрібної ділянки коду 
	mov [bx], al	;До дампу заносимо значення АХ
	inc bx			;Збільшуємо значення ВХ на 1 
	mov [bx], al	;Записуємо в інші ділянки пам’яті
	inc bx
	mov [bx], al	;Записуємо в інші ділянки пам’яті, все це здійснюється циклічно 
	inc bx
	mov [bx], al	; 
	inc bx
	mov [bx], al	; 
	inc bx
	mov [bx], al	; 
	inc bx
	mov [bx], al	; 
	inc bx

	mov bp, 01h		;Етап 1. До ВР заносимо ефективну адресу потрібної ділянки стеку
	mov cx, [bp]	;Етап 2. До СХ заносимо значення з пам’яті за адресою [SS]:[ВР].

Exit:
	mov ah,4ch
	mov al,[exCode] ;отримання коду виходу
	int 21h
END Start
