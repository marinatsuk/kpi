package com.company;

import java.util.Scanner;

class LinkedList {
    static Node head;

    static class Node {
        int data;
        Node next;
        Node(int d) {
            data = d;
            next = null;
        }
    }

    public static void main(String[] args) {

        LinkedList llist = new LinkedList();

        llist.head = new Node((int) (Math.random() * 100));
        Node second = new Node((int) (Math.random() * 100));
        Node third = new Node((int) (Math.random() * 100));
        Node forth = new Node((int) (Math.random() * 100));
        Node fifth = new Node((int) (Math.random() * 100));
        Node sixth = new Node((int) (Math.random() * 100));

        llist.head.next = second;
        second.next = third;
        third.next = forth;
        forth.next = fifth;
        fifth.next = sixth;

        llist.printList();

        System.out.println(" ");
        System.out.println("Выберите, что хотите сделать: (1 - вставки, 2 - удаление, 3 - сумма, 4 - поиск по значению)");

        Scanner scanner = new Scanner(System.in);
        int choice = scanner.nextInt();

        //long tStart = System.nanoTime();
        ////DO SOMETHING
        //long tEnd = System.nanoTime();
        switch (choice) {
            case 1:
                System.out.println("Введите число:");
                int new_data = scanner.nextInt();
                long tStart = System.nanoTime();
                llist.putFirst(new_data);
                long tEnd = System.nanoTime();
                llist.printList();
                System.out.println(" ");
                long difference = tEnd - tStart;
                System.out.println("Time:" + difference);

                System.out.println("Введите число:");
                int new_data_2 = scanner.nextInt();
                long tStart_1 = System.nanoTime();
                llist.putMiddle(new_data_2, 3); // на место третьего индекса
                long tEnd_1 = System.nanoTime();
                llist.printList();
                System.out.println(" ");
                long difference_1 = tEnd_1 - tStart_1;
                System.out.println("Time:" + difference_1);

                System.out.println("Введите число:");
                int new_data_3 = scanner.nextInt();
                long tStart_2 = System.nanoTime();
                llist.putEnd(new_data_3);
                long tEnd_2 = System.nanoTime();
                llist.printList();
                System.out.println(" ");
                long difference_2 = tEnd_2 - tStart_2;
                System.out.println("Time:" + difference_2);
                break;
            case (2):
                System.out.println("Удаление первого елемента");
                long tStart_3 = System.nanoTime();
                llist.delete(0);
                long tEnd_3 = System.nanoTime();
                llist.printList();
                System.out.println(" ");
                long difference_3 = tEnd_3 - tStart_3;
                System.out.println("Time:" + difference_3);

                System.out.println("Введите номер элемента");
                int position = scanner.nextInt();
                long tStart_4 = System.nanoTime();
                llist.delete(position);
                long tEnd_4 = System.nanoTime();
                llist.printList();
                System.out.println(" ");
                long difference_4 = tEnd_4 - tStart_4;
                System.out.println("Time:" + difference_4);

                System.out.println("Удаление последнего елемента");
                long tStart_5 = System.nanoTime();
                llist.delete(5);
                long tEnd_5 = System.nanoTime();
                llist.printList();
                System.out.println(" ");
                long difference_5 = tEnd_5 - tStart_5;
                System.out.println("Time:" + difference_5);
                break;

            case (3):
                System.out.println("Сумма равна:" + llist.sum(head));
                long tStart_6 = System.nanoTime();
                llist.sum(head);
                long tEnd_6 = System.nanoTime();
                long difference_6 = tEnd_6 - tStart_6;
                System.out.println("Time:" + difference_6);

            case (4):
                System.out.println("Введите элемент: ");
                int n = scanner.nextInt();
                System.out.println("Элемент находится под индексом " + llist.search(head, n));
                long tStart_7 = System.nanoTime();
                llist.search(head, n);
                long tEnd_7 = System.nanoTime();
                long difference_7 = tEnd_7 - tStart_7;
                System.out.println("Time:" + difference_7);

        }

    }

    public void printList() {
        Node n = head;
        while (n != null) {
            System.out.print(n.data + " ");
            n = n.next;
        }
    }

    public void putFirst(int new_data) {
        Node new_node = new Node(new_data);
        new_node.next = head;
        head = new_node;
    }

    public void putMiddle(int new_data_2, int index) {
       int i = 0;
       Node index_node = head;
       Node prev_node = head;
       Node node = new Node(new_data_2);

       while (i != index) {
           index_node = index_node.next;
           i++;
       }
       i = 0;
       while (i != index - 1) {
            prev_node = prev_node.next;
            i++;
       }

       Node node_temp = index_node;
       prev_node.next = node;
       node.next = node_temp;

    }

    public void putEnd(int new_data_3) {
        Node new_node = new Node(new_data_3);
        if (head == null) {
            head = new Node(new_data_3);
            return;
        }
        new_node.next = null;

        Node last = head;
        while (last.next != null) {
            last = last.next;
        }
        last.next = new_node;
        return;
    }

    public void delete (int position) {
        if (head == null)
            return;

        Node temp = head;

        if (position == 0) {
            head = temp.next;
            return;
        }

        for (int i = 0; temp != null && i < position - 1; i++) {
            temp = temp.next;
        }

        if (temp == null || temp.next == null) return;

        Node next = temp.next.next;

        temp.next = next;
    }
    static int sum(Node head) {
        int sum = 0, len = 0;
        Node temp = head;

        while (temp != null) {
            len++;
            temp = temp.next;
        }

        int c = len - 6;  // change 6 if needed
        temp = head;

        while (temp != null && c-- > 0) {
            temp = temp.next;
        }

        while (temp != null) {
            sum += temp.data;
            temp = temp.next;
        }
        return sum;
    }

    static int search(Node head, int n) {
        int index = 0;
        Node current = head;
        while (current != null) {
            if (current.data == n) {
                return index;
            }
            current = current.next;
            index++;
        }
        return -1;
    }
} 
